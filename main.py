import asyncio
import json

from aiogram.dispatcher.filters import Text

#from bestchange_listener import run_bestchange
from config import *
from aiogram import Bot, Dispatcher, executor, types
#from binance_connect import start_listening
from keyboards import *
from States import StatesChange
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import config

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


async def update(id) -> int:
    text_quote = "1. USDT->{}\n" \
                 "–ü–æ–∫—É–ø–∫–∞ –ø–æ –º–∞—Ä–∫–µ—Ç—É –∑–∞: {}\n" \
                 "–°—Å—ã–ª–∫–∞:{}\n" \
                 "2. {}->{}\n" \
                 "–ö—É—Ä—Å –æ–±–º–µ–Ω–∞: {} {} –Ω–∞ {} {}\n" \
                 "–û—Ç–¥–∞–µ—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ: {} {}\n" \
                 "–ü–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ: {} {}\n" \
                 "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±–º–µ–Ω–Ω–∏–∫: {}\n" \
                 "3. {}->USDT\n" \
                 "–ü—Ä–æ–¥–∞–∂–∞ –ø–æ –º–∞—Ä–∫–µ—Ç—É: {}\n" \
                 "–°—Å—ã–ª–∫–∞:{}\n\n" \
                 "–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {} USDT\n" \
                 "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Å–ø—Ä–µ–¥: {}%"
    if len(config.list_bestchange) != 0:
        for i in config.list_bestchange:
            await bot.send_message(id,
                                   text=text_quote.format(
                                       i['from'], i['buy'],
                                       "https://www.binance.com/ru-UA/trade/{}_USDT?theme=dark&type=spot"
                                       .format(i['from']),
                                       i['from'], i['to'],
                                       i['give'], i['from'], i['get'], i['to'],
                                       i['from_val'], i['from'],
                                       i['to_val'], i['to'],
                                       i['link'],
                                       i['to'], i['sell'],
                                       "https://www.binance.com/ru-UA/trade/{}_USDT?theme=dark&type=spot"
                                       .format(i['to']),
                                       i['spread_abs'], i['spread_proc']))
    return len(config.list_bestchange)


async def updates(id):
    while True:
        await update(id)
        await asyncio.sleep(60)


def main():
    executor.start_polling(dp, skip_updates=True)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ë–µ—Å—Ç—á–µ–Ω–¥–∂ –∏ –ë–∏–Ω–∞–Ω—Å, –Ω–∞—Ö–æ–¥—è —Å–≤—è–∑–∫–∏",
                         reply_markup=keyboard_main)


@dp.callback_query_handler(lambda c: c.data == "add_exchanger")
async def process_addexchanger(callback_query: types.CallbackQuery):
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ ID –æ–±–º–µ–Ω–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –ß–°:",
                           reply_markup=keyboard_cancel)
    await state.set_state(StatesChange.STATE_ADD_EXCHANGER)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == "diff_exchanger")
async def process_diffexchanger(callback_query: types.CallbackQuery):
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°:",
                           reply_markup=keyboard_cancel)
    await state.set_state(StatesChange.STATE_DIFF_EXCHANGER)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == "add_quotes")
async def process_addquotes(callback_query: types.CallbackQuery):
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –ß–°:",
                           reply_markup=keyboard_cancel)
    await state.set_state(StatesChange.STATE_ADD_QUOTE)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == "diff_quotes")
async def process_diffquotes(callback_query: types.CallbackQuery):
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    await bot.send_message(callback_query.from_user.id,
                           text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ß–°:",
                           reply_markup=keyboard_cancel)
    await state.set_state(StatesChange.STATE_DIFF_QUOTE)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change'))
async def process_change(callback_query: types.CallbackQuery):
    regime = callback_query.data[7:]
    state = dp.current_state(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
    if regime == "value":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é —Å—É–º–º—É:",
                               reply_markup=keyboard_cancel)
        await state.set_state(StatesChange.STATE_VALUE)

    if regime == "min_spread":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:",
                               reply_markup=keyboard_cancel)
        await state.set_state(StatesChange.STATE_SPREAD)
    if regime == "min_good":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ —Ö–æ—Ä–æ—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
                               reply_markup=keyboard_cancel)
        await state.set_state(StatesChange.STATE_MIN_GOOD)
    if regime == "max_bad":
        await bot.send_message(callback_query.from_user.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:",
                               reply_markup=keyboard_cancel)
        await state.set_state(StatesChange.STATE_MAX_BAD)
    await callback_query.message.delete()


@dp.callback_query_handler(lambda c: c.data == "add_exchanger", state=StatesChange.STATE_EMPTY)
async def process_addexchanger1(callback_query: types.CallbackQuery):
    await process_addexchanger(callback_query)


@dp.callback_query_handler(lambda c: c.data == "diff_exchanger", state=StatesChange.STATE_EMPTY)
async def process_diffexchanger1(callback_query: types.CallbackQuery):
    await process_diffexchanger(callback_query)


@dp.callback_query_handler(lambda c: c.data == "add_quotes", state=StatesChange.STATE_EMPTY)
async def process_addquotes1(callback_query: types.CallbackQuery):
    await process_addquotes(callback_query)


@dp.callback_query_handler(lambda c: c.data == "diff_quotes", state=StatesChange.STATE_EMPTY)
async def process_diffquotes1(callback_query: types.CallbackQuery):
    await process_diffquotes(callback_query)


@dp.callback_query_handler(lambda c: c.data and c.data.startswith('change'), state=StatesChange.STATE_EMPTY)
async def process_change1(callback_query: types.CallbackQuery):
    await process_change(callback_query)


@dp.message_handler(Text(equals="–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µüìñ"))
async def all_updater(message: types.Message):
    text = "–ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ –ø–æ–∏—Å–∫—É —Å–≤—è–∑–æ–∫, –ø–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É\n" \
           "–ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, –æ–Ω–∏ —Å—Ä–∞–∑—É –∂–µ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è.\n" \
           "–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ —Å–≤—è–∑–æ–∫!"
    await message.answer(text=text)
    asyncio.Task(updates(message.chat.id))


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"))
async def parameters_get(message: types.Message):
    temp_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –Ω–∞ —Å–µ–π—á–∞—Å:\n" \
                "–°—É–º–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã: {} USDT\n" \
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {}%\n" \
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}\n" \
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {}\n" \
                "–ù–∞ –±–∏—Ä–∂–µ –∫–∞–∫ –º–µ–π–∫–µ—Ä: {}"
    temp_text = temp_text.format(parameters["value"],
                                 parameters["min_spread"],
                                 parameters["min_good"],
                                 parameters["max_bad"],
                                 "–î–∞" if parameters["max_bad"] else "–ù–µ—Ç")
    await message.answer(temp_text, reply_markup=keyboard_inline_properties)


@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—åüîÉ"))
async def update_get(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Å–≤—è–∑–æ–∫!")
    num = await update(message.chat.id)
    if num == 0:
        await message.answer("–°–≤—è–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


@dp.message_handler(Text(equals="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Çüí∞Ô∏è"))
async def quotes_change(message: types.Message):
    temp_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ–π—á–∞—Å –≤–∞–ª—é—Ç—ã –∫ —Ä–∞–±–æ—Ç–µ:\n"
    for i in quotes.keys():
        if i not in quotes_black:
            temp_text += "{}, ".format(i[:-4])
    temp_text = temp_text[:-2] + "\n–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫: \n"
    for i in quotes_black:
        temp_text += "{}, ".format(i[:-4])
    temp_text = temp_text[:-2]
    await message.answer(temp_text, reply_markup=keyboard_inline_quoteschange)


@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∏—Ç—å‚ùå"), state='*')
async def cancel_operation(message: types.Message):
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=keyboard_main)


@dp.message_handler(Text(equals="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤üí±"))
async def exchangers_change(message: types.Message):
    temp_text = "–û–±–º–µ–Ω–Ω–∏–∫–∏ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n" \
                "–ù–∞–∑–≤–∞–Ω–∏–µ - ID\n"
    for i in exchangers_black:
        temp_text += "{} - {}\n".format(exchangers_black[i], i)
    await message.answer(temp_text, reply_markup=keyboard_inline_exchangerschange)


@dp.message_handler(Text(equals="–í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µüìñ"), state=StatesChange.STATE_EMPTY)
async def all_updater1(message: types.Message):
    await all_updater(message)


@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"), state=StatesChange.STATE_EMPTY)
async def parameters_get1(message: types.Message):
    await parameters_get(message)


@dp.message_handler(Text(equals="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞–ª—é—Çüí∞Ô∏è"), state=StatesChange.STATE_EMPTY)
async def quotes_change1(message: types.Message):
    await quotes_change(message)


@dp.message_handler(Text(equals="–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±–º–µ–Ω–Ω–∏–∫–æ–≤üí±"), state=StatesChange.STATE_EMPTY)
async def exchangers_change1(message: types.Message):
    await exchangers_change(message)


@dp.message_handler(Text(equals="–û–±–Ω–æ–≤–∏—Ç—åüîÉ"), state=StatesChange.STATE_EMPTY)
async def update_get1(message: types.Message):
    await update_get(message)


@dp.message_handler(state=StatesChange.STATE_VALUE)
async def process_value_change(message: types.Message):
    parameters["value"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–æ —Ä–∞–±–æ—á–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã",
                         reply_markup=keyboard_main)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_SPREAD)
async def process_value_change(message: types.Message):
    parameters["min_spread"] = float(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω —Ç—Ä–µ–±—É–µ–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥",
                         reply_markup=keyboard_main)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_MIN_GOOD)
async def process_value_change(message: types.Message):
    parameters["min_good"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ—Ä–æ—à–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                         reply_markup=keyboard_main)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_MAX_BAD)
async def process_value_change(message: types.Message):
    parameters["max_bad"] = int(message.text)
    state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
    await state.set_state(StatesChange.STATE_EMPTY)
    await message.answer("–ò–∑–º–µ–Ω–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–æ—Ö–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤",
                         reply_markup=keyboard_main)
    await parameters_get(message)


@dp.message_handler(state=StatesChange.STATE_ADD_QUOTE)
async def process_addquote_read(message: types.Message):
    quote = message.text + "USDT"
    if quote in quotes_black:
        quotes_black.remove(quote)
        await message.answer("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {} —É–±—Ä–∞–Ω–∞ –∏–∑ –ß–°".format(message.text), reply_markup=keyboard_main)
        state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
        await state.set_state(StatesChange.STATE_EMPTY)
        await quotes_change(message)
    else:
        await message.answer("–ù–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {} –≤ –ß–°".format(message.text))


@dp.message_handler(state=StatesChange.STATE_DIFF_QUOTE)
async def process_diffquote_read(message: types.Message):
    quote = message.text + "USDT"
    if quote in quotes:
        if quote not in quotes_black:
            quotes_black.append(quote)
            await message.answer("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ß–°".format(message.text), reply_markup=keyboard_main)
            state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
            await state.set_state(StatesChange.STATE_EMPTY)
            await quotes_change(message)
        else:
            await message.answer("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ {} —É–∂–µ –≤ –ß–°".format(message.text))
    else:
        await message.answer("–ù–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã {} –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö".format(message.text))


@dp.message_handler(state=StatesChange.STATE_ADD_EXCHANGER)
async def process_addquote_read(message: types.Message):
    exchanger = int(message.text)
    if exchanger in exchangers_black:
        exchangers_black.pop(exchanger)
        await message.answer("–û–±–º–µ–Ω–Ω–∏–∫ {} —É–±—Ä–∞–Ω –∏–∑ –ß–°".format(exchanger), reply_markup=keyboard_main)
        state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
        await state.set_state(StatesChange.STATE_EMPTY)
        await exchangers_change(message)
    else:
        await message.answer("–ù–µ—Ç –æ–±–º–µ–Ω–Ω–∏–∫–∞ {} –≤ –ß–°".format(exchanger))


@dp.message_handler(state=StatesChange.STATE_DIFF_EXCHANGER)
async def process_diffquote_read(message: types.Message):
    with open("exchangers.json", "r") as read_file:
        data: dict = json.load(read_file)
    exchanger = message.text
    if data.get(exchanger) != -1:
        if data[exchanger] not in exchangers_black:
            exchangers_black[data[exchanger]] = exchanger
            await message.answer("–û–±–º–µ–Ω–Ω–∏–∫ {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°".format(exchanger), reply_markup=keyboard_main)
            state = dp.current_state(chat=message.chat.id, user=message.from_user.id)
            await state.set_state(StatesChange.STATE_EMPTY)
            await exchangers_change(message)
        else:
            await message.answer("–û–±–º–µ–Ω–Ω–∏–∫ {} —É–∂–µ –≤ –ß–°".format(exchanger))
    else:
        await message.answer("–ù–µ—Ç –æ–±–º–µ–Ω–Ω–∏–∫–∞ {} –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö".format(exchanger))


@dp.message_handler(state=StatesChange.STATE_EMPTY)
async def echo(message: types.Message):
    await message.answer("–ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã =(")


if __name__ == '__main__':
    #run_bestchange()
    #start_listening()
    main()

'''
print("Start")
    api = BestChange()
    print("Finish")
    temp_dict = {}
    exchangers = api.exchangers().get()
    for i in exchangers:
        data = exchangers[i]
        temp_dict[data['name']] = data['id']
    with open("exchangers.json", 'w') as f:
        json.dump(temp_dict, f)
'''
